data$doy <- as.numeric(strftime(data$date, format = "%j")) ######dia del año

data$day_night <- case_when(data$hour >= 0 & data$hour < data$sunrise_dec ~ "night",
                            data$hour >= data$sunrise_dec & data$hour < data$sunset_dec ~ "daylight",
                            data$hour >= data$sunset_dec & data$hour < 24 ~ "night")

beepr::beep(sound = 8) ### sonido que avisa cuando terminamos de correr un codigo


### Data wizard
library(datawizard)
head(data_relocate(iris, select = "Species", before = "Sepal.Length")) ###relocaliza columnas
head(data_rename(iris, c("Sepal.Length", "Sepal.Width"), c("length", "width"))) ### cambiar nombres columnas
data_merge(x, y, join = "anti", by = "c") ###une las que no coinciden
remove_empty_columns(tmp) ### remueve todas las columnas vacías
remove_empty_rows(tmp) ### remueve las filas vacías
remove_empty(tmp) ### remueve las filas y columnas vacías
winsorize(anscombe) ###eliminar outliers
data_rotate(x) ### rotar columnas con filas
describe_distribution(iris) ### dice varias métricas de cada variable del dataframe
## tambien se puede trabajar con pipes, usando lo siguiente: |>

### Correlation
library(correlation)
library(see)

results <- correlation(iris)
results %>%
  summary(redundant = TRUE) %>%
  plot()
  
iris %>%
  select(Species, Sepal.Length, Sepal.Width, Petal.Width) %>%
  group_by(Species) %>%
  correlation()
  
###Gaussian Graphic models (correlaciones, útil para ver como en una red visual cuáles variables están más relacionadas con las otras)
library(see) # for plotting
library(ggraph) # needs to be loaded

plot(correlation(mtcars, partial = TRUE)) +
  scale_edge_color_continuous(low = "#000004FF", high = "#FCFDBFFF")













